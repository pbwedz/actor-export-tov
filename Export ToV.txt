import { pdfProvider } from 'http://YOURSERVERHERE/modules/actor-export/scripts/lib/providers/PDFProvider.js';

const mapper = new pdfProvider(actor);

// Page 1

mapper.field('all','Name', actor.name);
mapper.field('all','ClassLevel', actor.items.filter(i => i.type === 'class').map(i => `${i.name} ${i.system.levels}`).join(' / '));
mapper.field('all','Subclass', actor.items.filter(i => i.type === 'subclass').map(x => x.name)[0] || "");
mapper.field('all','Lineage', actor.items.filter(i => i.type === 'lineage').map(x => x.name)[0] || "");
mapper.field('all','Heritage', actor.items.filter(i => i.type === 'heritage').map(x => x.name)[0] || "");
mapper.field('all','Background', actor.items.filter(i => i.type === 'background').map(x => x.name)[0] || "");
mapper.field('all','XP', actor.system.progression.xp.value);

mapper.field('all','StrValue', actor.system.abilities.strength.value);
mapper.field('all','StrMod', actor.system.abilities.strength.mod);
mapper.field('all','StrSaveValue', actor.system.abilities.strength.save.mod);
mapper.field('all','StrSave', actor.system.abilities.strength.save.proficiency.hasProficiency);
mapper.field('all','DexValue', actor.system.abilities.dexterity.value);
mapper.field('all','DexMod', actor.system.abilities.dexterity.mod);
mapper.field('all','DexSaveValue', actor.system.abilities.dexterity.save.mod);
mapper.field('all','DexSave', actor.system.abilities.dexterity.save.proficiency.hasProficiency);
mapper.field('all','ConValue', actor.system.abilities.constitution.value);
mapper.field('all','ConMod', actor.system.abilities.constitution.mod);
mapper.field('all','ConSaveValue', actor.system.abilities.constitution.save.mod);
mapper.field('all','ConSave', actor.system.abilities.constitution.save.proficiency.hasProficiency);
mapper.field('all','IntValue', actor.system.abilities.intelligence.value);
mapper.field('all','IntMod', actor.system.abilities.intelligence.mod);
mapper.field('all','IntSaveValue', actor.system.abilities.intelligence.save.mod);
mapper.field('all','IntSave', actor.system.abilities.intelligence.save.proficiency.hasProficiency);
mapper.field('all','WisValue', actor.system.abilities.wisdom.value);
mapper.field('all','WisMod', actor.system.abilities.wisdom.mod);
mapper.field('all','WisSaveValue', actor.system.abilities.wisdom.save.mod);
mapper.field('all','WisSave', actor.system.abilities.wisdom.save.proficiency.hasProficiency);
mapper.field('all','ChaValue', actor.system.abilities.charisma.value);
mapper.field('all','ChaMod', actor.system.abilities.charisma.mod);
mapper.field('all','ChaSaveValue', actor.system.abilities.charisma.save.mod);
mapper.field('all','ChaSave', actor.system.abilities.charisma.save.proficiency.hasProficiency);

mapper.field('all','Proficiency', actor.system.attributes.proficiency);
mapper.field('all','Initiative', actor.system.attributes.initiative.mod);
mapper.field('all','Speed1', actor.system.traits.movement.label);
mapper.field('all','PassiveINS', actor.system.proficiencies.skills.insight.mod + 10);
mapper.field('all','PassiveINV', actor.system.proficiencies.skills.investigation.mod + 10);
mapper.field('all','PassivePER', actor.system.proficiencies.skills.perception.mod + 10);
mapper.field('all','MaxHP', actor.system.attributes.hp.max);
mapper.field('all','CurrentHP', actor.system.attributes.hp.value);
mapper.field('all','TempHP', actor.system.attributes.hp.temp);
mapper.field('all','HDUsed', actor.system.attributes.hd.max - actor.system.attributes.hd.available);
mapper.field('all','HDMax', actor.system.attributes.hd.max);
mapper.field('all','ATKName1', actor.items.filter(i => i.type === 'weapon')[0]?.name || " ");
mapper.field('all','DMG1', actor.items.filter(i => i.type === 'weapon')[0]?.system.damage.base.number + "d" + actor.items.filter(i => i.type === 'weapon')[0]?.system.damage.base.denomination || " ");
mapper.field('all','RANPRO1', actor.items.filter(i => i.type === 'weapon')[0]?.system.range.short + "/" + actor.items.filter(i => i.type === 'weapon')[0]?.system.range.long || " ");
mapper.field('all','ATKName2', actor.items.filter(i => i.type === 'weapon')[1]?.name || "");
mapper.field('all','DMG2', actor.items.filter(i => i.type === 'weapon')[1]?.system.damage.base.number + "d" + actor.items.filter(i => i.type === 'weapon')[1]?.system.damage.base.denomination || " ");
mapper.field('all','RANPRO2', actor.items.filter(i => i.type === 'weapon')[1]?.system.range.short + "/" + actor.items.filter(i => i.type === 'weapon')[1]?.system.range.long || " ");
mapper.field('all','ATKName3', actor.items.filter(i => i.type === 'weapon')[2]?.name || "");
mapper.field('all','DMG3', actor.items.filter(i => i.type === 'weapon')[2]?.system.damage.base.number + "d" + actor.items.filter(i => i.type === 'weapon')[2]?.system.damage.base.denomination || " ");
mapper.field('all','RANPRO3', actor.items.filter(i => i.type === 'weapon')[2]?.system.range.short + "/" + actor.items.filter(i => i.type === 'weapon')[2]?.system.range.long || " ");
mapper.field('all','ATKName4', actor.items.filter(i => i.type === 'weapon')[3]?.name || "");
mapper.field('all','DMG4', actor.items.filter(i => i.type === 'weapon')[3]?.system.damage.base.number + "d" + actor.items.filter(i => i.type === 'weapon')[3]?.system.damage.base.denomination || " ");
mapper.field('all','RANPRO4', actor.items.filter(i => i.type === 'weapon')[3]?.system.range.short + "/" + actor.items.filter(i => i.type === 'weapon')[3]?.system.range.long || " ");
mapper.field('all','ATKName5', actor.items.filter(i => i.type === 'weapon')[4]?.name || "");
mapper.field('all','DMG5', actor.items.filter(i => i.type === 'weapon')[4]?.system.damage.base.number + "d" + actor.items.filter(i => i.type === 'weapon')[4]?.system.damage.base.denomination || " ");
mapper.field('all','RANPRO5', actor.items.filter(i => i.type === 'weapon')[4]?.system.range.short + "/" + actor.items.filter(i => i.type === 'weapon')[4]?.system.range.long || " ");

mapper.field('all','ArcoProf', actor.system.proficiencies.skills.acrobatics.proficiency.multiplier);
mapper.field('all','AnHaProf', actor.system.proficiencies.skills.animalHandling.proficiency.multiplier);
mapper.field('all','ArcProf', actor.system.proficiencies.skills.arcana.proficiency.multiplier);
mapper.field('all','AthProf', actor.system.proficiencies.skills.athletics.proficiency.multiplier);
mapper.field('all','DecProf', actor.system.proficiencies.skills.deception.proficiency.multiplier);
mapper.field('all','HisProf', actor.system.proficiencies.skills.history.proficiency.multiplier);
mapper.field('all','InProf', actor.system.proficiencies.skills.insight.proficiency.multiplier);
mapper.field('all','IntProf', actor.system.proficiencies.skills.intimidation.proficiency.multiplier);
mapper.field('all','InvProf', actor.system.proficiencies.skills.investigation.proficiency.multiplier);
mapper.field('all','MedProf', actor.system.proficiencies.skills.medicine.proficiency.multiplier);
mapper.field('all','NatProf', actor.system.proficiencies.skills.nature.proficiency.multiplier);
mapper.field('all','PercProf', actor.system.proficiencies.skills.perception.proficiency.multiplier);
mapper.field('all','PerfProf', actor.system.proficiencies.skills.performance.proficiency.multiplier);
mapper.field('all','PersProf', actor.system.proficiencies.skills.persuasion.proficiency.multiplier);
mapper.field('all','RelProf', actor.system.proficiencies.skills.religion.proficiency.multiplier);
mapper.field('all','SoHProf', actor.system.proficiencies.skills.sleightOfHand.proficiency.multiplier);
mapper.field('all','SteProf', actor.system.proficiencies.skills.stealth.proficiency.multiplier);
mapper.field('all','SurProf', actor.system.proficiencies.skills.survival.proficiency.multiplier);

mapper.field('all','ACRO', actor.system.proficiencies.skills.acrobatics.mod);
mapper.field('all','ANHA', actor.system.proficiencies.skills.animalHandling.mod);
mapper.field('all','ARC', actor.system.proficiencies.skills.arcana.mod);
mapper.field('all','ATH', actor.system.proficiencies.skills.athletics.mod);
mapper.field('all','DEC', actor.system.proficiencies.skills.deception.mod);
mapper.field('all','HIS', actor.system.proficiencies.skills.history.mod);
mapper.field('all','INS', actor.system.proficiencies.skills.insight.mod);
mapper.field('all','INT', actor.system.proficiencies.skills.intimidation.mod);
mapper.field('all','INV', actor.system.proficiencies.skills.investigation.mod);
mapper.field('all','MED', actor.system.proficiencies.skills.medicine.mod);
mapper.field('all','NAT', actor.system.proficiencies.skills.nature.mod);
mapper.field('all','PER', actor.system.proficiencies.skills.perception.mod);
mapper.field('all','PERF', actor.system.proficiencies.skills.performance.mod);
mapper.field('all','PERS', actor.system.proficiencies.skills.persuasion.mod);
mapper.field('all','REL', actor.system.proficiencies.skills.religion.mod);
mapper.field('all','SOH', actor.system.proficiencies.skills.sleightOfHand.mod);
mapper.field('all','STE', actor.system.proficiencies.skills.stealth.mod);
mapper.field('all','SUR', actor.system.proficiencies.skills.survival.mod);

mapper.field('all','Armor1', actor.items.filter(i => i.type === 'armor')[0]?.name || " ");
mapper.field('all','BAC1', actor.items.filter(i => i.type === 'armor')[0]?.system.armor.value || " ");
mapper.field('all','Armor2', actor.items.filter(i => i.type === 'armor')[1]?.name || " ");
mapper.field('all','BAC2', actor.items.filter(i => i.type === 'armor')[1]?.system.armor.value || " ");
mapper.field('all','Armor3', actor.items.filter(i => i.type === 'armor')[2]?.name || " ");
mapper.field('all','BAC3', actor.items.filter(i => i.type === 'armor')[2]?.system.armor.value || " ");
mapper.field('all','ProfLangTal', actor.system.proficiencies.languages.label);
mapper.field('all','TreasureEquipment', actor.items.filter(i => i.type === 'gear' || i.type === 'tool' || i.type === 'container').map(i => `${i.name}`).join(' / '));
mapper.field('all','Platinum', actor.items.filter(i => i.type === 'currency' && i.name === 'Platinum')[0]?.system.quantity || "");
mapper.field('all','Gold', actor.items.filter(i => i.type === 'currency' && i.name === 'Gold')[0]?.system.quantity || "");
mapper.field('all','Silver', actor.items.filter(i => i.type === 'currency' && i.name === 'Silver')[0]?.system.quantity || "");
mapper.field('all','Copper', actor.items.filter(i => i.type === 'currency' && i.name === 'Copper')[0]?.system.quantity || "");
mapper.field('all','Features', actor.items.filter(i => i.type === 'feature').map(i => `${i.name}`).join(' / '));

// Page 2

mapper.field('all','CharacterName2', actor.name);
mapper.field('all','Age', actor.system.biography.age);
mapper.field('all','Height', actor.system.biography.height);
mapper.field('all','Weight', actor.system.biography.weight);
mapper.field('all','Eyes', actor.system.biography.eyes);
mapper.field('all','Skin', actor.system.biography.skin);
mapper.field('all','Hair', actor.system.biography.hair);
mapper.field('all','Backstory', actor.system.biography.backstory);
mapper.field('all','AdditionalTreasure', actor.items.filter(i => i.type === 'armor' || i.type === 'weapon' || i.type === 'sundry').map(i => `${i.name}`).join(' / '));

// Page 3

mapper.field('all','SpellsaveDC', actor.system.spellcasting.dc);
mapper.field('all','Bonus', actor.system.spellcasting.dc-8);
mapper.field('all','CharacterName3', actor.name);
const cantrips =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 0).sort();
(cantrips.length > 0) && mapper.field('all','Cantrip1', cantrips[0].name);
(cantrips.length > 1) && mapper.field('all','Cantrip2', cantrips[1].name);
(cantrips.length > 2) && mapper.field('all','Cantrip3', cantrips[2].name);
(cantrips.length > 3) && mapper.field('all','Cantrip4', cantrips[3].name);
(cantrips.length > 4) && mapper.field('all','Cantrip5', cantrips[4].name);
(cantrips.length > 5) && mapper.field('all','Cantrip6', cantrips[5].name);
(cantrips.length > 6) && mapper.field('all','Cantrip7', cantrips[6].name);
(cantrips.length > 7) && mapper.field('all','Cantrip8', cantrips[7].name);
(cantrips.length > 8) && mapper.field('all','Cantrip9', cantrips[8].name);
mapper.field('all','Total1', actor.system.spellcasting.slots['circle-1'].max);
mapper.field('all','Ex1', actor.system.spellcasting.slots['circle-1'].spent);
const circle1 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 1).sort();
(circle1.length > 0) && mapper.field('all','Check Box1-1', circle1[0].system.prepared);
(circle1.length > 1) && mapper.field('all','Check Box1-2', circle1[1].system.prepared);
(circle1.length > 2) && mapper.field('all','Check Box1-3', circle1[2].system.prepared);
(circle1.length > 3) && mapper.field('all','Check Box1-4', circle1[3].system.prepared);
(circle1.length > 4) && mapper.field('all','Check Box1-5', circle1[4].system.prepared);
(circle1.length > 5) && mapper.field('all','Check Box1-6', circle1[5].system.prepared);
(circle1.length > 6) && mapper.field('all','Check Box1-7', circle1[6].system.prepared);
(circle1.length > 7) && mapper.field('all','Check Box1-8', circle1[7].system.prepared);
(circle1.length > 8) && mapper.field('all','Check Box1-9', circle1[8].system.prepared);
(circle1.length > 9) && mapper.field('all','Check Box1-10', circle1[9].system.prepared);
(circle1.length > 10) && mapper.field('all','Check Box1-11', circle1[10].system.prepared);
(circle1.length > 11) && mapper.field('all','Check Box1-12', circle1[11].system.prepared);
(circle1.length > 12) && mapper.field('all','Check Box1-13', circle1[12].system.prepared);
(circle1.length > 0) && mapper.field('all','1-1', circle1[0].name);
(circle1.length > 1) && mapper.field('all','1-2', circle1[1].name);
(circle1.length > 2) && mapper.field('all','1-3', circle1[2].name);
(circle1.length > 3) && mapper.field('all','1-4', circle1[3].name);
(circle1.length > 4) && mapper.field('all','1-5', circle1[4].name);
(circle1.length > 5) && mapper.field('all','1-6', circle1[5].name);
(circle1.length > 6) && mapper.field('all','1-7', circle1[6].name);
(circle1.length > 7) && mapper.field('all','1-8', circle1[7].name);
(circle1.length > 8) && mapper.field('all','1-9', circle1[8].name);
(circle1.length > 9) && mapper.field('all','1-10', circle1[9].name);
(circle1.length > 10) && mapper.field('all','1-11', circle1[10].name);
(circle1.length > 11) && mapper.field('all','1-12', circle1[11].name);
(circle1.length > 12) && mapper.field('all','1-13', circle1[12].name);
mapper.field('all','Total2', actor.system.spellcasting.slots['circle-2'].max);
mapper.field('all','Ex2', actor.system.spellcasting.slots['circle-2'].spent);
const circle2 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 2).sort();
(circle2.length > 0) && mapper.field('all','Check Box2-1', circle2[0].system.prepared);
(circle2.length > 1) && mapper.field('all','Check Box2-2', circle2[1].system.prepared);
(circle2.length > 2) && mapper.field('all','Check Box2-3', circle2[2].system.prepared);
(circle2.length > 3) && mapper.field('all','Check Box2-4', circle2[3].system.prepared);
(circle2.length > 4) && mapper.field('all','Check Box2-5', circle2[4].system.prepared);
(circle2.length > 5) && mapper.field('all','Check Box2-6', circle2[5].system.prepared);
(circle2.length > 6) && mapper.field('all','Check Box2-7', circle2[6].system.prepared);
(circle2.length > 7) && mapper.field('all','Check Box2-8', circle2[7].system.prepared);
(circle2.length > 8) && mapper.field('all','Check Box2-9', circle2[8].system.prepared);
(circle2.length > 9) && mapper.field('all','Check Box2-10', circle2[9].system.prepared);
(circle2.length > 10) && mapper.field('all','Check Box2-11', circle2[10].system.prepared);
(circle2.length > 11) && mapper.field('all','Check Box2-12', circle2[11].system.prepared);
(circle2.length > 0) && mapper.field('all','2-1', circle2[0].name);
(circle2.length > 1) && mapper.field('all','2-2', circle2[1].name);
(circle2.length > 2) && mapper.field('all','2-3', circle2[2].name);
(circle2.length > 3) && mapper.field('all','2-4', circle2[3].name);
(circle2.length > 4) && mapper.field('all','2-5', circle2[4].name);
(circle2.length > 5) && mapper.field('all','2-6', circle2[5].name);
(circle2.length > 6) && mapper.field('all','2-7', circle2[6].name);
(circle2.length > 7) && mapper.field('all','2-8', circle2[7].name);
(circle2.length > 8) && mapper.field('all','2-9', circle2[8].name);
(circle2.length > 9) && mapper.field('all','2-10', circle2[9].name);
(circle2.length > 10) && mapper.field('all','2-11', circle2[10].name);
(circle2.length > 11) && mapper.field('all','2-12', circle2[11].name);
mapper.field('all','Total3', actor.system.spellcasting.slots['circle-3'].max);
mapper.field('all','Ex3', actor.system.spellcasting.slots['circle-3'].spent);
const circle3 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 3).sort();
(circle3.length > 0) && mapper.field('all','Check Box3-1', circle3[0].system.prepared);
(circle3.length > 1) && mapper.field('all','Check Box3-2', circle3[1].system.prepared);
(circle3.length > 2) && mapper.field('all','Check Box3-3', circle3[2].system.prepared);
(circle3.length > 3) && mapper.field('all','Check Box3-4', circle3[3].system.prepared);
(circle3.length > 4) && mapper.field('all','Check Box3-5', circle3[4].system.prepared);
(circle3.length > 5) && mapper.field('all','Check Box3-6', circle3[5].system.prepared);
(circle3.length > 6) && mapper.field('all','Check Box3-7', circle3[6].system.prepared);
(circle3.length > 7) && mapper.field('all','Check Box3-8', circle3[7].system.prepared);
(circle3.length > 8) && mapper.field('all','Check Box3-9', circle3[8].system.prepared);
(circle3.length > 9) && mapper.field('all','Check Box3-10', circle3[9].system.prepared);
(circle3.length > 10) && mapper.field('all','Check Box3-11', circle3[10].system.prepared);
(circle3.length > 11) && mapper.field('all','Check Box3-12', circle3[11].system.prepared);
(circle3.length > 0) && mapper.field('all','3-1', circle3[0].name);
(circle3.length > 1) && mapper.field('all','3-2', circle3[1].name);
(circle3.length > 2) && mapper.field('all','3-3', circle3[2].name);
(circle3.length > 3) && mapper.field('all','3-4', circle3[3].name);
(circle3.length > 4) && mapper.field('all','3-5', circle3[4].name);
(circle3.length > 5) && mapper.field('all','3-6', circle3[5].name);
(circle3.length > 6) && mapper.field('all','3-7', circle3[6].name);
(circle3.length > 7) && mapper.field('all','3-8', circle3[7].name);
(circle3.length > 8) && mapper.field('all','3-9', circle3[8].name);
(circle3.length > 9) && mapper.field('all','3-10', circle3[9].name);
(circle3.length > 10) && mapper.field('all','3-11', circle3[10].name);
(circle3.length > 11) && mapper.field('all','3-12', circle3[11].name);
mapper.field('all','Total4', actor.system.spellcasting.slots['circle-4'].max);
mapper.field('all','Ex4', actor.system.spellcasting.slots['circle-4'].spent);
const circle4 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 4).sort();
(circle4.length > 0) && mapper.field('all','Check Box4-1', circle4[0].system.prepared);
(circle4.length > 1) && mapper.field('all','Check Box4-2', circle4[1].system.prepared);
(circle4.length > 2) && mapper.field('all','Check Box4-3', circle4[2].system.prepared);
(circle4.length > 3) && mapper.field('all','Check Box4-4', circle4[3].system.prepared);
(circle4.length > 4) && mapper.field('all','Check Box4-5', circle4[4].system.prepared);
(circle4.length > 5) && mapper.field('all','Check Box4-6', circle4[5].system.prepared);
(circle4.length > 6) && mapper.field('all','Check Box4-7', circle4[6].system.prepared);
(circle4.length > 7) && mapper.field('all','Check Box4-8', circle4[7].system.prepared);
(circle4.length > 8) && mapper.field('all','Check Box4-9', circle4[8].system.prepared);
(circle4.length > 9) && mapper.field('all','Check Box4-10', circle4[9].system.prepared);
(circle4.length > 10) && mapper.field('all','Check Box4-11', circle4[10].system.prepared);
(circle4.length > 0) && mapper.field('all','4-1', circle4[0].name);
(circle4.length > 1) && mapper.field('all','4-2', circle4[1].name);
(circle4.length > 2) && mapper.field('all','4-3', circle4[2].name);
(circle4.length > 3) && mapper.field('all','4-4', circle4[3].name);
(circle4.length > 4) && mapper.field('all','4-5', circle4[4].name);
(circle4.length > 5) && mapper.field('all','4-6', circle4[5].name);
(circle4.length > 6) && mapper.field('all','4-7', circle4[6].name);
(circle4.length > 7) && mapper.field('all','4-8', circle4[7].name);
(circle4.length > 8) && mapper.field('all','4-9', circle4[8].name);
(circle4.length > 9) && mapper.field('all','4-10', circle4[9].name);
(circle4.length > 10) && mapper.field('all','4-11', circle4[10].name);
mapper.field('all','Total5', actor.system.spellcasting.slots['circle-5'].max);
mapper.field('all','Ex5', actor.system.spellcasting.slots['circle-5'].spent);
const circle5 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 5).sort();
(circle5.length > 0) && mapper.field('all','Check Box5-1', circle5[0].system.prepared);
(circle5.length > 1) && mapper.field('all','Check Box5-2', circle5[1].system.prepared);
(circle5.length > 2) && mapper.field('all','Check Box5-3', circle5[2].system.prepared);
(circle5.length > 3) && mapper.field('all','Check Box5-4', circle5[3].system.prepared);
(circle5.length > 4) && mapper.field('all','Check Box5-5', circle5[4].system.prepared);
(circle5.length > 5) && mapper.field('all','Check Box5-6', circle5[5].system.prepared);
(circle5.length > 6) && mapper.field('all','Check Box5-7', circle5[6].system.prepared);
(circle5.length > 7) && mapper.field('all','Check Box5-8', circle5[7].system.prepared);
(circle5.length > 8) && mapper.field('all','Check Box5-9', circle5[8].system.prepared);
(circle5.length > 9) && mapper.field('all','Check Box5-10', circle5[9].system.prepared);
(circle5.length > 10) && mapper.field('all','Check Box5-11', circle5[10].system.prepared);
(circle5.length > 0) && mapper.field('all','5-1', circle5[0].name);
(circle5.length > 1) && mapper.field('all','5-2', circle5[1].name);
(circle5.length > 2) && mapper.field('all','5-3', circle5[2].name);
(circle5.length > 3) && mapper.field('all','5-4', circle5[3].name);
(circle5.length > 4) && mapper.field('all','5-5', circle5[4].name);
(circle5.length > 5) && mapper.field('all','5-6', circle5[5].name);
(circle5.length > 6) && mapper.field('all','5-7', circle5[6].name);
(circle5.length > 7) && mapper.field('all','5-8', circle5[7].name);
(circle5.length > 8) && mapper.field('all','5-9', circle5[8].name);
(circle5.length > 9) && mapper.field('all','5-10', circle5[9].name);
(circle5.length > 10) && mapper.field('all','5-11', circle5[10].name);
mapper.field('all','Total6', actor.system.spellcasting.slots['circle-6'].max);
mapper.field('all','Ex6', actor.system.spellcasting.slots['circle-6'].spent);
const circle6 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 6).sort();
(circle6.length > 0) && mapper.field('all','Check Box6-1', circle6[0].system.prepared);
(circle6.length > 1) && mapper.field('all','Check Box6-2', circle6[1].system.prepared);
(circle6.length > 2) && mapper.field('all','Check Box6-3', circle6[2].system.prepared);
(circle6.length > 3) && mapper.field('all','Check Box6-4', circle6[3].system.prepared);
(circle6.length > 4) && mapper.field('all','Check Box6-5', circle6[4].system.prepared);
(circle6.length > 5) && mapper.field('all','Check Box6-6', circle6[5].system.prepared);
(circle6.length > 6) && mapper.field('all','Check Box6-7', circle6[6].system.prepared);
(circle6.length > 7) && mapper.field('all','Check Box6-8', circle6[7].system.prepared);
(circle6.length > 8) && mapper.field('all','Check Box6-9', circle6[8].system.prepared);
(circle6.length > 0) && mapper.field('all','6-1', circle6[0].name);
(circle6.length > 1) && mapper.field('all','6-2', circle6[1].name);
(circle6.length > 2) && mapper.field('all','6-3', circle6[2].name);
(circle6.length > 3) && mapper.field('all','6-4', circle6[3].name);
(circle6.length > 4) && mapper.field('all','6-5', circle6[4].name);
(circle6.length > 5) && mapper.field('all','6-6', circle6[5].name);
(circle6.length > 6) && mapper.field('all','6-7', circle6[6].name);
(circle6.length > 7) && mapper.field('all','6-8', circle6[7].name);
(circle6.length > 8) && mapper.field('all','6-9', circle6[8].name);
mapper.field('all','Total7', actor.system.spellcasting.slots['circle-7'].max);
mapper.field('all','Ex7', actor.system.spellcasting.slots['circle-7'].spent);
const circle7 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 7).sort();
(circle7.length > 0) && mapper.field('all','Check Box7-1', circle7[0].system.prepared);
(circle7.length > 1) && mapper.field('all','Check Box7-2', circle7[1].system.prepared);
(circle7.length > 2) && mapper.field('all','Check Box7-3', circle7[2].system.prepared);
(circle7.length > 3) && mapper.field('all','Check Box7-4', circle7[3].system.prepared);
(circle7.length > 4) && mapper.field('all','Check Box7-5', circle7[4].system.prepared);
(circle7.length > 5) && mapper.field('all','Check Box7-6', circle7[5].system.prepared);
(circle7.length > 6) && mapper.field('all','Check Box7-7', circle7[6].system.prepared);
(circle7.length > 0) && mapper.field('all','7-1', circle7[0].name);
(circle7.length > 1) && mapper.field('all','7-2', circle7[1].name);
(circle7.length > 2) && mapper.field('all','7-3', circle7[2].name);
(circle7.length > 3) && mapper.field('all','7-4', circle7[3].name);
(circle7.length > 4) && mapper.field('all','7-5', circle7[4].name);
(circle7.length > 5) && mapper.field('all','7-6', circle7[5].name);
(circle7.length > 6) && mapper.field('all','7-7', circle7[6].name);
mapper.field('all','Total8', actor.system.spellcasting.slots['circle-8'].max);
mapper.field('all','Ex8', actor.system.spellcasting.slots['circle-8'].spent);
const circle8 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 8).sort();
(circle8.length > 0) && mapper.field('all','Check Box8-1', circle8[0].system.prepared);
(circle8.length > 1) && mapper.field('all','Check Box8-2', circle8[1].system.prepared);
(circle8.length > 2) && mapper.field('all','Check Box8-3', circle8[2].system.prepared);
(circle8.length > 3) && mapper.field('all','Check Box8-4', circle8[3].system.prepared);
(circle8.length > 4) && mapper.field('all','Check Box8-5', circle8[4].system.prepared);
(circle8.length > 5) && mapper.field('all','Check Box8-6', circle8[5].system.prepared);
(circle8.length > 6) && mapper.field('all','Check Box8-7', circle8[6].system.prepared);
(circle8.length > 0) && mapper.field('all','8-1', circle8[0].name);
(circle8.length > 1) && mapper.field('all','8-2', circle8[1].name);
(circle8.length > 2) && mapper.field('all','8-3', circle8[2].name);
(circle8.length > 3) && mapper.field('all','8-4', circle8[3].name);
(circle8.length > 4) && mapper.field('all','8-5', circle8[4].name);
(circle8.length > 5) && mapper.field('all','8-6', circle8[5].name);
(circle8.length > 6) && mapper.field('all','8-7', circle8[6].name);
mapper.field('all','Total9', actor.system.spellcasting.slots['circle-9'].max);
mapper.field('all','Ex9', actor.system.spellcasting.slots['circle-9'].spent);
const circle9 =  actor.items.filter(i => i.type === 'spell' && i.system.circle.base === 9).sort();
(circle9.length > 0) && mapper.field('all','Check Box9-1', circle9[0].system.prepared);
(circle9.length > 1) && mapper.field('all','Check Box9-2', circle9[1].system.prepared);
(circle9.length > 2) && mapper.field('all','Check Box9-3', circle9[2].system.prepared);
(circle9.length > 3) && mapper.field('all','Check Box9-4', circle9[3].system.prepared);
(circle9.length > 4) && mapper.field('all','Check Box9-5', circle9[4].system.prepared);
(circle9.length > 5) && mapper.field('all','Check Box9-6', circle9[5].system.prepared);
(circle9.length > 6) && mapper.field('all','Check Box9-7', circle9[6].system.prepared);
(circle9.length > 0) && mapper.field('all','9-1', circle9[0].name);
(circle9.length > 1) && mapper.field('all','9-2', circle9[1].name);
(circle9.length > 2) && mapper.field('all','9-3', circle9[2].name);
(circle9.length > 3) && mapper.field('all','9-4', circle9[3].name);
(circle9.length > 4) && mapper.field('all','9-5', circle9[4].name);
(circle9.length > 5) && mapper.field('all','9-6', circle9[5].name);
(circle9.length > 6) && mapper.field('all','9-7', circle9[6].name);

export { mapper };